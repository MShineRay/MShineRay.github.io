import{_ as n,c as o,j as e,a as r,o as a}from"./chunks/framework.D7c5mGHq.js";const v=JSON.parse('{"title":"vue","description":"","frontmatter":{},"headers":[],"relativePath":"work-notes/front-end/vue/index.md","filePath":"work-notes/front-end/vue/index.md"}'),s={name:"work-notes/front-end/vue/index.md"};function l(d,t,i,c,u,p){return a(),o("div",null,t[0]||(t[0]=[e("h1",{id:"vue",tabindex:"-1"},[r("vue "),e("a",{class:"header-anchor",href:"#vue","aria-label":'Permalink to "vue"'},"​")],-1),e("h2",{id:"观察-observe",tabindex:"-1"},[r("观察 observe "),e("a",{class:"header-anchor",href:"#观察-observe","aria-label":'Permalink to "观察 observe"'},"​")],-1),e("p",null,"观察的方式就是深度遍历每一个属性，把每一个属性的读取和赋值变成函数",-1),e("p",null,"Object.defineProperty(obj, key, { get() { // ... }, set() { // ... } })",-1),e("p",null,"对象属性级别监听 Object.defineProperty 进行深度遍历，效率缺失",-1),e("ul",null,[e("li",null,"无法监听属性的新增和删除")],-1),e("p",null,"// 观察 const proxy = new Proxy(obj, { get(){ }, set(){ } }) 对象级别监听，无需深度遍历，可以监听到属性的新增和删除",-1)]))}const b=n(s,[["render",l]]);export{v as __pageData,b as default};
