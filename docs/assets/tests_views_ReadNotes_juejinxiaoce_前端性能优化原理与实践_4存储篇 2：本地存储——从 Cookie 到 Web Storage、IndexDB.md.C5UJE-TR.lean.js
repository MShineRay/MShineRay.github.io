import{_ as e,c as s,a2 as n,o}from"./chunks/framework.CuYr6EMX.js";const h=JSON.parse('{"title":"本地存储——从 Cookie 到 Web Storage、IndexDB","description":"","frontmatter":{},"headers":[],"relativePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/4存储篇 2：本地存储——从 Cookie 到 Web Storage、IndexDB.md","filePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/4存储篇 2：本地存储——从 Cookie 到 Web Storage、IndexDB.md"}'),t={name:"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/4存储篇 2：本地存储——从 Cookie 到 Web Storage、IndexDB.md"};function i(p,a,l,r,c,d){return o(),s("div",null,a[0]||(a[0]=[n(`<h1 id="本地存储——从-cookie-到-web-storage、indexdb" tabindex="-1">本地存储——从 Cookie 到 Web Storage、IndexDB <a class="header-anchor" href="#本地存储——从-cookie-到-web-storage、indexdb" aria-label="Permalink to &quot;本地存储——从 Cookie 到 Web Storage、IndexDB&quot;">​</a></h1><p>随着移动网络的发展与演化，我们手机上现在除了有原生 App，还能跑“WebApp”——它即开即用，用完即走。一个优秀的 WebApp 甚至可以拥有和原生 App 媲美的功能和体验。</p><p>我认为，WebApp 就是我们前端性能优化的产物，是我们前端工程师对体验不懈追求的结果，是 Web 网页在性能上向 Native 应用的一次“宣战”。</p><p>WebApp 优异的性能表现，要归功于浏览器存储技术的广泛应用——这其中除了我们上节提到的缓存，本地存储技术也功不可没。</p><h2 id="故事的开始-从-cookie-说起" tabindex="-1">故事的开始：从 Cookie 说起 <a class="header-anchor" href="#故事的开始-从-cookie-说起" aria-label="Permalink to &quot;故事的开始：从 Cookie 说起&quot;">​</a></h2><p>Cookie 的本职工作并非本地存储，而是“维持状态”。</p><p>在 Web 开发的早期，人们亟需解决的一个问题就是状态管理的问题：HTTP 协议是一个无状态协议，服务器接收客户端的请求，返回一个响应，故事到此就结束了，服务器并没有记录下关于客户端的任何信息。那么下次请求的时候，如何让服务器知道“我是我”呢？</p><p>在这样的背景下，Cookie 应运而生。</p><p>Cookie 说白了就是一个存储在浏览器里的一个小小的文本文件，它附着在 HTTP 请求上，在浏览器和服务器之间“飞来飞去”。它可以携带用户信息，当服务器检查 Cookie 的时候，便可以获取到客户端的状态。</p><p>关于 Cookie 的详细内容，我们可以在 Chrome 的 Application 面板中查看到：</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/22/166002bebabcf363?w=1916&amp;h=904&amp;f=png&amp;s=257061" alt=""></p><p>如大家所见，<strong>Cookie 以键值对的形式存在</strong>。</p><h3 id="cookie的性能劣势" tabindex="-1">Cookie的性能劣势 <a class="header-anchor" href="#cookie的性能劣势" aria-label="Permalink to &quot;Cookie的性能劣势&quot;">​</a></h3><h4 id="cookie-不够大" tabindex="-1">Cookie 不够大 <a class="header-anchor" href="#cookie-不够大" aria-label="Permalink to &quot;Cookie 不够大&quot;">​</a></h4><p>Cookie 是有体积上限的，它最大只能有 4KB。当 Cookie 超过 4KB 时，它将面临被裁切的命运。 Cookie 只能用来存取少量的信息。</p><h4 id="过量的-cookie-会带来巨大的性能浪费" tabindex="-1">过量的 Cookie 会带来巨大的性能浪费 <a class="header-anchor" href="#过量的-cookie-会带来巨大的性能浪费" aria-label="Permalink to &quot;过量的 Cookie 会带来巨大的性能浪费&quot;">​</a></h4><p><strong>Cookie 是紧跟域名的</strong>。我们通过响应头里的 Set-Cookie 指定要存储的 Cookie 值。 默认情况下，domain 被设置为设置 Cookie 页面的主机名，我们也可以手动设置 domain 的值：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Set-Cookie: name=xiuyan; domain=xiuyan.me</span></span></code></pre></div><p><strong>同一个域名下的所有请求，都会携带 Cookie</strong>。 如果我们此刻仅仅是请求一张图片或者一个 CSS 文件，我们也要携带一个 Cookie 跑来跑去（关键是 Cookie 里存储的信息我现在并不需要）， 这是一件多么劳民伤财的事情。Cookie 虽然小，请求却可以有很多，随着请求的叠加，这样的不必要的 Cookie 带来的开销将是无法想象的。</p><p>随着前端应用复杂度的提高，Cookie 也渐渐演化为了一个“存储多面手”——它不仅仅被用于维持状态，还被塞入了一些乱七八糟的其它信息，被迫承担起了本地存储的“重任”。 在没有更好的本地存储解决方案的年代里，Cookie 小小的身体里承载了 4KB 内存所不能承受的压力。</p><p>为了弥补 Cookie 的局限性，让“专业的人做专业的事情”，Web Storage 出现了。</p><h2 id="web-storage" tabindex="-1">Web Storage <a class="header-anchor" href="#web-storage" aria-label="Permalink to &quot;Web Storage&quot;">​</a></h2><p>Web Storage 是 HTML5 专门为浏览器存储而提供的数据存储机制。 它又分为 Local Storage 与 Session Storage。</p><h3 id="local-storage-与-session-storage-的区别" tabindex="-1">Local Storage 与 Session Storage 的区别 <a class="header-anchor" href="#local-storage-与-session-storage-的区别" aria-label="Permalink to &quot;Local Storage 与 Session Storage 的区别&quot;">​</a></h3><p>两者的区别在于<strong>生命周期</strong>与<strong>作用域</strong>的不同。</p><ul><li><p>生命周期：Local Storage 是持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法是手动删除； 而 Session Storage 是临时性的本地存储，它是会话级别的存储，当会话结束（页面被关闭）时，存储内容也随之被释放。</p></li><li><p>作用域：Local Storage、Session Storage 和 Cookie 都遵循同源策略。 但 Session Storage 特别的一点在于，即便是相同域名下的两个页面，只要它们<strong>不在同一个浏览器窗口中</strong>打开， 那么它们的 Session Storage 内容便无法共享。</p></li></ul><h3 id="web-storage-的特性" tabindex="-1">Web Storage 的特性 <a class="header-anchor" href="#web-storage-的特性" aria-label="Permalink to &quot;Web Storage 的特性&quot;">​</a></h3><ul><li><p>存储容量大： Web Storage 根据浏览器的不同，存储容量可以达到 5-10M 之间。</p></li><li><p>仅位于浏览器端，不与服务端发生通信。</p></li></ul><h3 id="web-storage-核心-api-使用示例" tabindex="-1">Web Storage 核心 API 使用示例 <a class="header-anchor" href="#web-storage-核心-api-使用示例" aria-label="Permalink to &quot;Web Storage 核心 API 使用示例&quot;">​</a></h3><p>Web Storage 保存的数据内容和 Cookie 一样，是文本内容，以键值对的形式存在。</p><ul><li>存储数据：setItem()</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>localStorage.setItem(&#39;user_name&#39;, &#39;xiuyan&#39;)</span></span></code></pre></div><ul><li>读取数据： getItem()</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>localStorage.getItem(&#39;user_name&#39;)</span></span></code></pre></div><ul><li>删除某一键名对应的数据： removeItem()</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>localStorage.removeItem(&#39;user_name&#39;)</span></span></code></pre></div><ul><li>清空数据记录：clear()</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>localStorage.clear()</span></span></code></pre></div><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><h4 id="local-storage" tabindex="-1">Local Storage <a class="header-anchor" href="#local-storage" aria-label="Permalink to &quot;Local Storage&quot;">​</a></h4><p>Local Storage 在存储方面没有什么特别的限制，理论上 Cookie 无法胜任的、可以用简单的键值对来存取的数据存储任务， 都可以交给 Local Storage 来做。</p><p>考虑到 Local Storage 的特点之一是<strong>持久</strong>，有时我们更倾向于用它来存储一些内容稳定的资源。 比如图片内容丰富的电商网站会用它来存储 Base64 格式的图片字符串：</p><h4 id="session-storage" tabindex="-1">Session Storage <a class="header-anchor" href="#session-storage" aria-label="Permalink to &quot;Session Storage&quot;">​</a></h4><p>Session Storage 更适合用来存储生命周期和它同步的<strong>会话级别</strong>的信息。这些信息只适用于当前会话，当你开启新的会话时，它也需要相应的更新或释放。比如微博的 Session Storage 就主要是存储你本次会话的浏览足迹：</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/29/16623d7a9457d1df?w=1597&amp;h=696&amp;f=jpeg&amp;s=68226" alt=""></p><p>lasturl 对应的就是你上一次访问的 URL 地址，这个地址是即时的。 当你切换 URL 时，它随之更新，当你关闭页面时，留着它也确实没有什么意义了，干脆释放吧。这样的数据用 Session Storage 来处理再合适不过。</p><p>这样看来，Web Storage 确实也够强大了。那么 Web Storage 是否能 hold 住所有的存储场景呢？</p><p>答案是否定的。它使用键值对的形式进行存储，这种模式有点类似于对象，却甚至连对象都不是——它只能存储字符串， 要想得到对象，我们还需要先对字符串进行一轮解析。</p><p>Web Storage 是对 Cookie 的拓展，它只能用于存储少量的简单数据。 当遇到大规模的、结构复杂的数据时，Web Storage 也爱莫能助了。 这时候我们就要清楚我们的终极大 boss——IndexDB！</p><h2 id="indexdb" tabindex="-1">IndexDB <a class="header-anchor" href="#indexdb" aria-label="Permalink to &quot;IndexDB&quot;">​</a></h2><p>IndexDB 是一个<strong>运行在浏览器上的非关系型数据库</strong>。既然是数据库了，那就不是 5M、10M 这样小打小闹级别了。 理论上来说，IndexDB 是没有存储上限的（一般来说不会小于 250M）。它不仅可以存储字符串，还可以存储二进制数据。</p><ol><li>打开/创建一个 IndexDB 数据库（当该数据库不存在时，open 方法会直接创建一个名为 xiaoceDB 新数据库）。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  // 后面的回调中，我们可以通过event.target.result拿到数据库实例</span></span>
<span class="line"><span>  let db</span></span>
<span class="line"><span>  // 参数1位数据库名，参数2为版本号</span></span>
<span class="line"><span>  const request = window.indexedDB.open(&quot;xiaoceDB&quot;, 1)</span></span>
<span class="line"><span>  // 使用IndexDB失败时的监听函数</span></span>
<span class="line"><span>  request.onerror = function(event) {</span></span>
<span class="line"><span>     console.log(&#39;无法使用IndexDB&#39;)</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>  // 成功</span></span>
<span class="line"><span>  request.onsuccess  = function(event){</span></span>
<span class="line"><span>    // 此处就可以获取到db实例</span></span>
<span class="line"><span>    db = event.target.result</span></span>
<span class="line"><span>    console.log(&quot;你打开了IndexDB&quot;)</span></span>
<span class="line"><span>  }</span></span></code></pre></div><ol start="2"><li>创建一个 object store（object store 对标到数据库中的“表”单位）。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// onupgradeneeded事件会在初始化数据库/版本发生更新时被调用，我们在它的监听函数中创建object store</span></span>
<span class="line"><span>request.onupgradeneeded = function(event){</span></span>
<span class="line"><span>  let objectStore</span></span>
<span class="line"><span>  // 如果同名表未被创建过，则新建test表</span></span>
<span class="line"><span>  if (!db.objectStoreNames.contains(&#39;test&#39;)) {</span></span>
<span class="line"><span>    objectStore = db.createObjectStore(&#39;test&#39;, { keyPath: &#39;id&#39; })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="3"><li>构建一个事务来执行一些数据库操作，像增加或提取数据等。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  // 创建事务，指定表格名称和读写权限</span></span>
<span class="line"><span>  const transaction = db.transaction([&quot;test&quot;],&quot;readwrite&quot;)</span></span>
<span class="line"><span>  // 拿到Object Store对象</span></span>
<span class="line"><span>  const objectStore = transaction.objectStore(&quot;test&quot;)</span></span>
<span class="line"><span>  // 向表格写入数据</span></span>
<span class="line"><span>  objectStore.add({id: 1, name: &#39;xiuyan&#39;})</span></span></code></pre></div><ol start="4"><li>通过监听正确类型的事件以等待操作完成。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  // 操作成功时的监听函数</span></span>
<span class="line"><span>  transaction.oncomplete = function(event) {</span></span>
<span class="line"><span>    console.log(&quot;操作成功&quot;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  // 操作失败时的监听函数</span></span>
<span class="line"><span>  transaction.onerror = function(event) {</span></span>
<span class="line"><span>    console.log(&quot;这里有一个Error&quot;)</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h3 id="indexdb-的应用场景" tabindex="-1">IndexDB 的应用场景 <a class="header-anchor" href="#indexdb-的应用场景" aria-label="Permalink to &quot;IndexDB 的应用场景&quot;">​</a></h3><p>通过上面的示例大家可以看出，在 IndexDB 中，我们可以创建多个数据库，一个数据库中创建多张表，一张表中存储多条数据——这足以 hold 住复杂的结构性数据。IndexDB 可以看做是 LocalStorage 的一个升级，当数据的复杂度和规模上升到了 LocalStorage 无法解决的程度，我们毫无疑问可以请出 IndexDB 来帮忙。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>浏览器缓存/存储技术的出现和发展，为我们的前端应用带来了无限的转机。近年来基于缓存/存储技术的第三方库层出不绝，此外还衍生出了 <a href="https://lavas.baidu.com/pwa" target="_blank" rel="noreferrer">PWA</a> 这样优秀的 Web 应用模型。可以说，现代前端应用，尤其是移动端应用，之所以可以发展到在体验上叫板 Native 的地步，主要就是仰仗缓存/存储立下的汗马功劳。</p>`,63)]))}const b=e(t,[["render",i]]);export{h as __pageData,b as default};
