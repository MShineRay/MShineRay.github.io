import{_ as a,c as n,a2 as t,o as p}from"./chunks/framework.CuYr6EMX.js";const h=JSON.parse('{"title":"浏览器背后的运行机制","description":"","frontmatter":{},"headers":[],"relativePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/渲染篇 2:解锁浏览器背后的运行机制.md","filePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/渲染篇 2:解锁浏览器背后的运行机制.md"}'),e={name:"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/渲染篇 2:解锁浏览器背后的运行机制.md"};function l(i,s,o,c,r,d){return p(),n("div",null,s[0]||(s[0]=[t(`<h1 id="浏览器背后的运行机制" tabindex="-1">浏览器背后的运行机制 <a class="header-anchor" href="#浏览器背后的运行机制" aria-label="Permalink to &quot;浏览器背后的运行机制&quot;">​</a></h1><h2 id="浏览器的-心" tabindex="-1">浏览器的“心” <a class="header-anchor" href="#浏览器的-心" aria-label="Permalink to &quot;浏览器的“心”&quot;">​</a></h2><p>浏览器的“心”，说的就是浏览器的内核。 这些差异性正是因为浏览器内核的不同而导致的——浏览器内核决定了浏览器解释网页语法的方式。<br> 浏览器内核可以分成两部分：渲染引擎（Layout Engine 或者 Rendering Engine）和 JS 引擎。早期渲染引擎和 JS 引擎并没有十分明确的区分，但随着 JS 引擎越来越独立，内核也成了渲染引擎的代称（<strong>下文我们将沿用这种叫法</strong>）。渲染引擎又包括了 HTML 解释器、CSS 解释器、布局、网络、存储、图形、音视频、图片解码器等等零部件。</p><p>目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。</p><h2 id="开启浏览器渲染-黑盒" tabindex="-1">开启浏览器渲染“黑盒” <a class="header-anchor" href="#开启浏览器渲染-黑盒" aria-label="Permalink to &quot;开启浏览器渲染“黑盒”&quot;">​</a></h2><p>什么是渲染过程？渲染引擎根据 HTML 文件描述构建相应的数学模型，调用浏览器各个零部件，从而将网页资源代码转换为图像结果，这个过程就是渲染过程。</p><p>浏览器呈现网页这个过程，宛如一个黑盒。在这个神秘的黑盒中，有许多功能模块，内核内部的实现正是这些功能模块相互配合协同工作进行的。其中我们最需要关注的，就是<strong>HTML 解释器</strong>、<strong>CSS 解释器</strong>、<strong>图层布局计算模块</strong>、<strong>视图绘制模块</strong>与<strong>JavaScript 引擎</strong>这几大模块：</p><ul><li><p>HTML 解释器：将 HTML 文档经过词法分析输出 DOM 树。</p></li><li><p>CSS 解释器：解析 CSS 文档, 生成样式规则。</p></li><li><p>图层布局计算模块：布局计算每个对象的精确位置和大小。</p></li><li><p>视图绘制模块：进行具体节点的图像绘制，将像素渲染到屏幕上。</p></li><li><p>JavaScript 引擎：编译执行 Javascript 代码。</p></li></ul><h2 id="浏览器渲染过程解析" tabindex="-1">浏览器渲染过程解析 <a class="header-anchor" href="#浏览器渲染过程解析" aria-label="Permalink to &quot;浏览器渲染过程解析&quot;">​</a></h2><p>在浏览器里，每一个页面的首次渲染都经历了如下阶段（图中箭头不代表串行，有一些操作是并行进行的，下文会说明）：</p><ul><li><strong>解析 HTML</strong></li></ul><p>浏览器执行了所有的加载解析逻辑，在解析 HTML 的过程中发出了页面渲染所需的各种外部资源请求。</p><ul><li><strong>计算样式</strong></li></ul><p>浏览器将识别并加载所有的 CSS 样式信息与 DOM 树合并，最终生成页面 render 树（:after :before 这样的伪元素会在这个环节被构建到 DOM 树中）。</p><ul><li><strong>计算图层布局</strong></li></ul><p>页面中所有元素的相对位置信息，大小等信息均在这一步得到计算。</p><ul><li><strong>绘制图层</strong></li></ul><p>浏览器会根据 DOM 代码结果，把每一个页面图层转换为像素，并对所有的媒体文件进行解码。</p><ul><li><strong>整合图层，得到页面</strong></li></ul><p>浏览器会合并合各个图层，将数据由 CPU 输出给 GPU 最终绘制在屏幕上。（复杂的视图层会给这个阶段的 GPU 计算带来一些压力，在实际应用中为了优化动画性能，我们有时会手动区分不同的图层）。</p><h2 id="几棵重要的-树" tabindex="-1">几棵重要的“树” <a class="header-anchor" href="#几棵重要的-树" aria-label="Permalink to &quot;几棵重要的“树”&quot;">​</a></h2><ul><li><p>DOM 树：解析 HTML 以创建的是 DOM 树（DOM tree ）：渲染引擎开始解析 HTML 文档，转换树中的标签到 DOM 节点，它被称为“内容树”。</p></li><li><p>CSSOM 树：解析 CSS（包括外部 CSS 文件和样式元素）创建的是 CSSOM 树。CSSOM 的解析过程与 DOM 的解析过程是<strong>并行的</strong>。</p></li><li><p>渲染树：CSSOM 与 DOM 结合，得到的就是渲染树（Render tree ）。</p></li><li><p>布局渲染树：从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标，我们便得到了基于渲染树的布局渲染树（Layout of the render tree）。</p></li><li><p>绘制渲染树: 遍历渲染树，每个节点将使用 UI 后端层来绘制。整个过程叫做绘制渲染树（Painting the render tree）。</p></li></ul><p>首先是基于 HTML 构建一个 DOM 树，这棵 DOM 树与 CSS 解释器解析出的 CSSOM 相结合，就有了布局渲染树。最后浏览器以布局渲染树为蓝本，去计算布局并绘制图像，我们页面的初次渲染就大功告成了。</p><p>之后每当一个新元素加入到这个 DOM 树当中，浏览器便会通过 CSS 引擎查遍 CSS 样式表，找到符合该元素的样式规则应用到这个元素上，然后再重新去绘制它。</p><h2 id="基于渲染流程的-css-优化建议" tabindex="-1">基于渲染流程的 CSS 优化建议 <a class="header-anchor" href="#基于渲染流程的-css-优化建议" aria-label="Permalink to &quot;基于渲染流程的 CSS 优化建议&quot;">​</a></h2><p>CSS 引擎查找样式表，对每条规则都按从右到左的顺序去匹配。 看如下规则：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#myList  li {}</span></span></code></pre></div><p>事实上，<strong>CSS 选择符是从右到左进行匹配的</strong>。实际开销相当高：浏览器必须遍历页面上每个 li 元素，并且每次都要去确认这个 li 元素的父元素 id 是不是 myList，你说坑不坑！</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>* {}</span></span></code></pre></div><p>不少同学拿通配符清除默认样式。它会匹配所有元素，所以浏览器必须去遍历每一个元素！</p><ul><li><p>避免使用通配符，只对需要用到的元素进行选择。</p></li><li><p>关注可以通过继承实现的属性，避免重复匹配重复定义。</p></li><li><p>少用标签选择器。如果可以，用类选择器替代：</p><p>错误示范：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#myList li{}</span></span></code></pre></div><p>课代表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.myList_li {}</span></span></code></pre></div></li><li><p>不要画蛇添足，id 和 class 选择器不应该被多余的标签选择器拖后腿</p><p>错误示范</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.myList#title</span></span></code></pre></div><p>课代表</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#title</span></span></code></pre></div></li><li><p>减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素。</p></li></ul><h2 id="css-与-js-的加载顺序优化" tabindex="-1">CSS 与 JS 的加载顺序优化 <a class="header-anchor" href="#css-与-js-的加载顺序优化" aria-label="Permalink to &quot;CSS 与 JS 的加载顺序优化&quot;">​</a></h2><p>HTML、CSS 和 JS，都具有<strong>阻塞渲染</strong>的特性。</p><h3 id="css-的阻塞" tabindex="-1">CSS 的阻塞 <a class="header-anchor" href="#css-的阻塞" aria-label="Permalink to &quot;CSS 的阻塞&quot;">​</a></h3><p>DOM 和 CSSOM 合力才能构建渲染树。这一点会给性能造成严重影响：默认情况下，CSS 是阻塞的资源。浏览器在构建 CSSOM 的过程中，<strong>不会渲染任何已处理的内容</strong>。即便 DOM 已经解析完毕了，只要 CSSOM 不 OK，那么渲染这个事情就不 OK（这主要是为了避免没有 CSS 的 HTML 页面丑陋地“裸奔”在用户眼前）。</p><p>只有当开始解析 HTML 后、解析到 link 标签或者 style 标签时，CSS 才登场，CSSOM 的构建才开始。很多时候，DOM 不得不等待 CSSOM。因此我们可以这样总结：</p><blockquote><p>CSS 是阻塞渲染的资源。需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。</p></blockquote><p>将 CSS 放在 head 标签里 和 启用 CDN 实现静态资源加载速度的优化。</p><h3 id="js-的阻塞" tabindex="-1">JS 的阻塞 <a class="header-anchor" href="#js-的阻塞" aria-label="Permalink to &quot;JS 的阻塞&quot;">​</a></h3><p>在首次渲染过程中，JS 并不是一个非登场不可的角色——没有 JS，CSSOM 和 DOM 照样可以组成渲染树，页面依然会呈现——即使它死气沉沉、毫无交互。</p><p>JS 的作用在于<strong>修改</strong>，它帮助我们修改网页的方方面面：内容、样式以及它如何响应用户交互。这“方方面面”的修改，本质上都是对 DOM 和 CSSDOM 进行修改。 因此 JS 的执行会阻止 CSSOM，在我们不作显式声明的情况下，它也会阻塞 DOM。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>  &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span>
<span class="line"><span>  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span></span>
<span class="line"><span>  &lt;title&gt;JS阻塞测试&lt;/title&gt;</span></span>
<span class="line"><span>  &lt;style&gt;</span></span>
<span class="line"><span>    #container {</span></span>
<span class="line"><span>      background-color: yellow;</span></span>
<span class="line"><span>      width: 100px;</span></span>
<span class="line"><span>      height: 100px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  &lt;/style&gt;</span></span>
<span class="line"><span>  &lt;script&gt;</span></span>
<span class="line"><span>    // 尝试获取container元素</span></span>
<span class="line"><span>    var container = document.getElementById(&quot;container&quot;)</span></span>
<span class="line"><span>    console.log(&#39;container&#39;, container)</span></span>
<span class="line"><span>  &lt;/script&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>  &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;script&gt;</span></span>
<span class="line"><span>    // 尝试获取container元素</span></span>
<span class="line"><span>    var container = document.getElementById(&quot;container&quot;)</span></span>
<span class="line"><span>    console.log(&#39;container&#39;, container)</span></span>
<span class="line"><span>    // 输出container元素此刻的背景色</span></span>
<span class="line"><span>    console.log(&#39;container bgColor&#39;, getComputedStyle(container).backgroundColor)</span></span>
<span class="line"><span>  &lt;/script&gt;</span></span>
<span class="line"><span>  &lt;style&gt;</span></span>
<span class="line"><span>    #container {</span></span>
<span class="line"><span>      background-color: blue;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  &lt;/style&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><p>三个 console 的结果分别为：</p><p>注：本例仅使用了内联 JS 做测试。感兴趣的同学可以把这部分 JS 当做外部文件引入看看效果——它们的表现一致。</p><p>第一次尝试获取 id 为 container 的 DOM 失败，这说明 JS 执行时阻塞了 DOM，后续的 DOM 无法构建；第二次才成功，这说明脚本块只能找到在它前面构建好的元素。这两者结合起来，“阻塞 DOM”得到了验证。再看第三个 console，尝试获取 CSS 样式，获取到的是在 JS 代码执行前的背景色（yellow），而非后续设定的新样式（blue），说明 CSSOM 也被阻塞了。那么在阻塞的背后，到底发生了什么呢？</p><p><strong>JS 引擎是独立于渲染引擎存在的</strong>。我们的 JS 代码在文档的何处插入，就在何处执行。 当 HTML 解析器遇到一个 script 标签时，它会暂停渲染过程，将控制权交给 JS 引擎。 JS 引擎对内联的 JS 代码会直接执行，对外部 JS 文件还要先获取到脚本、再进行执行。 等 JS 引擎运行完毕，浏览器又会把控制权还给渲染引擎，继续 CSSOM 和 DOM 的构建。 因此与其说是 JS 把 CSS 和 HTML 阻塞了，不如说是 JS 引擎抢走了渲染引擎的控制权。</p><p>浏览器之所以让 JS 阻塞其它的活动，是因为它不知道 JS 会做什么改变，担心如果不阻止后续的操作， 会造成混乱。 假如我们可以确认一个 JS 文件的执行时机并不一定非要是此时此刻，我们就可以通过对它使用 defer 和 async 来避免不必要的阻塞， 这里我们就引出了外部 JS 的三种加载方式。</p><h3 id="js的三种加载方式" tabindex="-1">JS的三种加载方式 <a class="header-anchor" href="#js的三种加载方式" aria-label="Permalink to &quot;JS的三种加载方式&quot;">​</a></h3><ul><li><p>正常模式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span></span></code></pre></div></li></ul><p>这种情况下 JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执行完毕才能去做其它事情。</p><ul><li><p>async 模式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script async src=&quot;index.js&quot;&gt;&lt;/script&gt;</span></span></code></pre></div></li></ul><p>async 模式下，JS 不会阻塞浏览器做任何其它的事情。 它的加载是异步的，当它加载结束，JS 脚本会<strong>立即执行</strong>。</p><ul><li><p>defer 模式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script defer src=&quot;index.js&quot;&gt;&lt;/script&gt;</span></span></code></pre></div></li></ul><p>defer 模式下，JS 的加载是异步的，执行是<strong>被推迟的</strong>。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。</p><p>从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</p><p>通过审时度势地向 script 标签添加 async/defer，我们就可以告诉浏览器在等待脚本可用期间不阻止其它的工作，这样可以显著提升性能。</p>`,56)]))}const u=a(e,[["render",l]]);export{h as __pageData,u as default};
