import{_ as e,c as n,a2 as s,o as p}from"./chunks/framework.CuYr6EMX.js";const d=JSON.parse('{"title":"Performance、LightHouse 与性能 API","description":"","frontmatter":{},"headers":[],"relativePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/性能监测篇：Performance、LightHouse 与性能 API.md","filePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/性能监测篇：Performance、LightHouse 与性能 API.md"}'),t={name:"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/性能监测篇：Performance、LightHouse 与性能 API.md"};function o(r,a,i,l,c,h){return p(),n("div",null,a[0]||(a[0]=[s(`<h1 id="performance、lighthouse-与性能-api" tabindex="-1">Performance、LightHouse 与性能 API <a class="header-anchor" href="#performance、lighthouse-与性能-api" aria-label="Permalink to &quot;Performance、LightHouse 与性能 API&quot;">​</a></h1><p>性能监测是前端性能优化的重要一环。监测的目的是为了确定性能瓶颈，从而有的放矢地开展具体的优化工作。</p><p>性能监测方案主要有两种：<strong>可视化方案、可编程方案</strong>。</p><h2 id="可视化监测-从-performance-面板说起" tabindex="-1">可视化监测：从 Performance 面板说起 <a class="header-anchor" href="#可视化监测-从-performance-面板说起" aria-label="Permalink to &quot;可视化监测：从 Performance 面板说起&quot;">​</a></h2><p>Performance 是 Chrome 提供给我们的开发者工具，用于记录和分析我们的应用在运行时的所有活动。它呈现的数据具有实时性、多维度的特点，可以帮助我们很好地定位性能问题。</p><h3 id="开始记录" tabindex="-1">开始记录 <a class="header-anchor" href="#开始记录" aria-label="Permalink to &quot;开始记录&quot;">​</a></h3><p>右键打开开发者工具，选中我们的 Performance 面板：</p><p>当我们选中图中所标示的实心圆按钮，Performance 会开始帮我们记录我们后续的交互操作；当我们选中圆箭头按钮，Performance 会将页面重新加载，计算加载过程中的性能表现。<br> tips：使用 Performance 工具时，为了规避其它 Chrome 插件对页面的性能影响，我们最好在无痕模式下打开页面：</p><h3 id="简要分析" tabindex="-1">简要分析 <a class="header-anchor" href="#简要分析" aria-label="Permalink to &quot;简要分析&quot;">​</a></h3><p><strong>FPS</strong>：这是一个和动画性能密切相关的指标，它表示每一秒的帧数。图中绿色柱状越高表示帧率越高，体验就越流畅。若出现红色块，则代表长时间帧，很可能会出现卡顿。图中以绿色为主，偶尔出现红块，说明网页性能并不糟糕，但仍有可优化的空间。</p><p><strong>CPU</strong>：表示CPU的使用情况，不同的颜色片段代表着消耗CPU资源的不同事件类型。这部分的图像和下文详情面板中的Summary内容有对应关系，我们可以结合这两者挖掘性能瓶颈。</p><p><strong>NET</strong>：粗略的展示了各请求的耗时与前后顺序。这个指标一般来说帮助不大。</p><h3 id="挖掘性能瓶颈" tabindex="-1">挖掘性能瓶颈 <a class="header-anchor" href="#挖掘性能瓶颈" aria-label="Permalink to &quot;挖掘性能瓶颈&quot;">​</a></h3><p>我们会主要去看 Main 栏目下的火焰图和 Summary 提供给我们的饼图——这两者和概述面板中的 CPU 一栏结合。</p><p>先看 CPU 图表和 Summary 饼图。 CPU 图表中，我们可以根据颜色填充的饱满程度，确定 CPU 的忙闲，进而了解该页面的总的任务量。 而 Summary 饼图则以一种直观的方式告诉了我们，哪个类型的任务最耗时（从本例来看是脚本执行过程）。</p><p>再看 Main 提供给我们的火焰图。它展示了整个运行时主进程所做的每一件事情（包括加载、脚本运行、渲染、布局、绘制等）。 x 轴表示随时间的记录。每个长条就代表一个活动。更宽的条形意味着事件需要更长时间。 y 轴表示调用堆栈，我们可以看到事件是相互堆叠的，上层的事件触发了下层的事件。</p><p>CPU 图标和 Summary 图都是按照“类型”给我们提供性能信息， 而 Main 火焰图则将粒度细化到了每一个函数的调用。 到底是从哪个过程开始出问题、是哪个函数拖了后腿、又是哪个事件触发了这个函数，这些具体的、细致的问题都将在 Main 火焰图中得到解答。</p><h2 id="可视化监测-更加聪明的-lighthouse" tabindex="-1">可视化监测： 更加聪明的 LightHouse <a class="header-anchor" href="#可视化监测-更加聪明的-lighthouse" aria-label="Permalink to &quot;可视化监测： 更加聪明的 LightHouse&quot;">​</a></h2><p>Performance 展示作用大于分析作用。它要求使用者对工具本身及其所展示的信息有充分的理解，能够将晦涩的数据“翻译”成具体的性能问题。</p><blockquote><p>Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。 你可以将其作为一个 Chrome 扩展程序运行，或从命令行运行。 为Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试， 然后生成一个有关页面性能的报告。</p></blockquote><p>首先在 Chrome 的应用商店里下载一个 LightHouse。这一步 OK 之后，我们浏览器右上角会出现一个小小的灯塔 ICON。打开我们需要测试的那个页面，点击这个 ICON，唤起如下的面板：</p><p>然后点击“Generate report”按钮，只需静候数秒，LightHouse 就会为我们输出一个完美的性能报告。</p><p>上述分别是页面性能、PWA（渐进式 Web 应用）、可访问性（无障碍）、最佳实践、SEO 五项指标的跑分。孰强孰弱，我们一看便知。</p><p>向下拉动 Report 页，我们还可以看到每一个指标的细化评估：</p><p>在“Opportunities”中，LightHouse 甚至针对我们的性能问题给出了可行的建议、以及每一项优化操作预期会帮我们节省的时间。这份报告的可操作性是很强的——我们只需要对着 LightHouse 给出的建议，一条一条地去尝试，就可以看到自己的页面，在一秒一秒地变快。</p><p>除了直接下载，我们还可以通过命令行使用 LightHouse：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install -g lighthouse</span></span>
<span class="line"><span>lighthouse https://juejin.im/books</span></span></code></pre></div><p>此外，从 Chrome 60 开始，DevTools 中直接加入了基于 LightHouse 的 Audits 面板：</p><p>LightHouse 因此变得更加触手可及了，这一操作也足以证明 Chrome 团队对 LightHouse 的推崇。</p><h2 id="可编程的性能上报方案-w3c-性能-api" tabindex="-1">可编程的性能上报方案： W3C 性能 API <a class="header-anchor" href="#可编程的性能上报方案-w3c-性能-api" aria-label="Permalink to &quot;可编程的性能上报方案： W3C 性能 API&quot;">​</a></h2><p>W3C 规范为我们提供了 Performance 相关的接口。 它允许我们获取到用户访问一个页面的每个阶段的精确时间，从而对性能进行分析。 我们可以将其理解为 Performance 面板的进一步细化与可编程化。</p><h3 id="访问-performance-对象" tabindex="-1">访问 performance 对象 <a class="header-anchor" href="#访问-performance-对象" aria-label="Permalink to &quot;访问 performance 对象&quot;">​</a></h3><p>performance 是一个全局对象。我们在控制台里输入 window.performance，就可一窥其全貌：</p><h3 id="关键时间节点" tabindex="-1">关键时间节点 <a class="header-anchor" href="#关键时间节点" aria-label="Permalink to &quot;关键时间节点&quot;">​</a></h3><p>在 performance 的 timing 属性中，我们可以查看到如下的时间戳：</p><p>这些时间戳与页面整个加载流程中的关键时间节点有着一一对应的关系：</p><p>通过求两个时间点之间的差值，我们可以得出某个过程花费的时间，举个🌰：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const timing = window.performance.timing</span></span>
<span class="line"><span>// DNS查询耗时</span></span>
<span class="line"><span>timing.domainLookupEnd - timing.domainLookupStart</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>// TCP连接耗时</span></span>
<span class="line"><span>timing.connectEnd - timing.connectStart</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>// 内容加载耗时</span></span>
<span class="line"><span>timing.responseEnd - timing.requestStart</span></span>
<span class="line"><span>···</span></span></code></pre></div><p>除了这些常见的耗时情况，我们更应该去关注一些<strong>关键性能指标</strong>：firstbyte、fpt、tti、ready 和 load 时间。 这些指标数据与真实的用户体验息息相关，是我们日常业务性能监测中不可或缺的一部分：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// firstbyte：首包时间	</span></span>
<span class="line"><span>timing.responseStart – timing.domainLookupStart	</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// fpt：First Paint Time, 首次渲染时间 / 白屏时间</span></span>
<span class="line"><span>timing.responseEnd – timing.fetchStart</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// tti：Time to Interact，首次可交互时间	</span></span>
<span class="line"><span>timing.domInteractive – timing.fetchStart</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ready：HTML 加载完成时间，即 DOM 就位的时间</span></span>
<span class="line"><span>timing.domContentLoaded – timing.fetchStart</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// load：页面完全加载时间</span></span>
<span class="line"><span>timing.loadEventStart – timing.fetchStart</span></span></code></pre></div><p>以上这些通过 Performance API 获取到的时间信息都具有较高的准确度。 我们可以对此进行一番格式处理之后上报给服务端，也可以基于此去制作相应的统计图表，从而实现更加精准、更加个性化的性能耗时统计。</p><p>此外，通过访问 performance 的 memory 属性，我们还可以获取到内存占用相关的数据； 通过对 performance 的其它属性方法的灵活运用，我们还可以把它耦合进业务里，实现更加多样化的性能监测需求——灵活， 是可编程化方案最大的优点。</p><ul><li><p><a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference" target="_blank" rel="noreferrer">Performance 官方文档</a></p></li><li><p><a href="https://developers.google.com/web/tools/lighthouse/?hl=zh-cn" target="_blank" rel="noreferrer">使用 Lighthouse 审查网络应用</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance" target="_blank" rel="noreferrer">MDN Performance API 介绍</a></p></li></ul>`,43)]))}const u=e(t,[["render",o]]);export{d as __pageData,u as default};
