import{_ as t,c as o,a2 as a,o as r}from"./chunks/framework.CuYr6EMX.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/0开篇：知识体系与小册格局.md","filePath":"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/0开篇：知识体系与小册格局.md"}'),l={name:"tests/views/ReadNotes/juejinxiaoce/前端性能优化原理与实践/0开篇：知识体系与小册格局.md"};function i(s,e,c,n,p,_){return r(),o("div",null,e[0]||(e[0]=[a('<ul><li><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1" target="_blank" rel="noreferrer">雅虎军规</a></li><li><a href="https://book.douban.com/subject/5362856/" target="_blank" rel="noreferrer">《高性能 JavaScript》</a></li></ul><blockquote><p>从输入 URL 到页面加载完成，发生了什么？</p></blockquote><p>现在站在性能优化的角度：首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作。 我们将这个过程切分为如下的过程片段：</p><ol><li>DNS 解析</li><li>TCP 连接</li><li>HTTP 请求抛出</li><li>服务端处理请求，HTTP 响应返回</li><li>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</li></ol><p>DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？能——浏览器 DNS 缓存和 DNS prefetch。 TCP 每次的三次握手都急死人，有没有解决方案？有——长连接、预连接、接入 SPDY 协议。如果说这两个过程的优化往往需要我们和团队的服务端工程师协作完成，前端单方面可以做的努力有限，那么 HTTP 请求呢？——在减少请求次数和减小请求体积方面！ 服务器越远，一次请求就越慢，那部署时就把静态资源放在离我们更近的 CDN 上是不是就能更快一些？</p><p>以上提到的都是网络层面的性能优化。 再往下走就是浏览器端的性能优化——这部分涉及资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避等等。</p>',6)]))}const f=t(l,[["render",i]]);export{d as __pageData,f as default};
